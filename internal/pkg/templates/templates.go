// Code generated by vfsgen; DO NOT EDIT.

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Templates statically implements the virtual filesystem provided to vfsgen.
var Templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 12, 15, 20, 4, 15, 810613400, time.UTC),
		},
		"/bot.go.tpl": &vfsgen۰CompressedFileInfo{
			name:             "bot.go.tpl",
			modTime:          time.Date(2020, 12, 15, 20, 4, 15, 805606500, time.UTC),
			uncompressedSize: 992,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x84\x52\xcf\x8e\xda\x3c\x10\xbf\x47\xca\x3b\xcc\xe7\xc3\x27\x07\x2d\x8e\xb4\x6a\x0f\xa5\xe5\x02\xab\xdd\xf6\xd0\x5d\xb4\xf4\xbe\x32\xc9\xc4\x58\x38\x9e\xc8\x18\x5a\x14\xf1\xee\xd5\xc4\x2c\x45\xd5\xb2\xbd\xc4\x1e\xcf\xef\xdf\x8c\xd2\xf7\x63\x28\x47\x86\xe2\xa1\xc3\x09\x18\x1b\xd7\xbb\x95\xaa\xa8\x2d\x83\x6e\x3e\xdd\x7e\x28\x57\x14\xc7\xab\x9d\x75\x35\x86\xb2\x6a\xeb\xcb\x5a\xad\x28\xce\xc9\x37\xd6\x8c\x4a\x18\x1f\x8f\x79\x56\x96\x86\x26\x06\x3d\x06\x1d\x11\x0c\x81\xc1\xf8\xb6\x66\xa9\x94\xba\x82\xef\x7b\x50\x33\x8a\xcf\xe8\xf4\x01\x58\xb5\xef\x21\x68\x6f\x10\xd4\xbc\xad\xbf\x53\xbd\x73\xb8\xbd\xea\xc6\xec\x57\x16\xfa\x7a\xb8\xe6\x59\xa7\xab\x8d\x36\x08\xad\xb6\x9e\x6b\xdb\x76\x14\x22\xc8\x3c\x13\x8d\xd3\x46\xe4\xd9\x0b\x88\xbf\x8c\xc5\x75\xe7\x01\xac\x4e\x10\xf4\x35\xbf\x89\xb7\xe7\xec\x36\x86\x4f\x91\x67\xe7\x6d\xc1\x3b\xd0\x6a\x40\x9c\x18\xc2\x50\xb7\x31\xca\xfa\xf2\xa0\x5b\xa7\xf6\xb7\xfc\xe6\x88\xe3\x0a\xda\xf2\x37\xda\x16\x45\x9e\x15\x3c\x53\xb3\xf3\xd5\x30\xa0\x2c\xa0\xcf\xb3\xa4\x74\x6f\x1d\xc2\x64\x0a\x3c\xa5\x5a\xc6\x60\xbd\x91\x22\xb5\xc4\x0d\xd0\x56\x3d\x60\x44\xbf\x97\xe2\xeb\x7c\xf6\xf4\xe3\x65\xfe\xf4\x78\xff\xed\x41\x14\x37\x20\x16\x3a\xae\x21\x12\xb0\x35\x24\x06\x34\xd6\xe1\x04\xf0\x17\x94\xd4\xc5\x72\x5d\x71\xea\xd4\x52\x0c\x13\x45\x9e\x0d\x46\x0b\x1d\xb6\x28\x8b\x3c\xb3\x0d\x8c\x2e\x82\x4c\xa7\x20\x04\x87\xeb\xb4\xb7\x95\x14\x8f\x74\xa9\xcc\xf4\x63\x9e\x35\x37\x80\x21\x70\x68\xda\xaa\xa7\x0e\xbd\xbc\x90\x48\x9a\xdc\xff\x6f\x0a\xde\xba\x3f\x62\x18\x42\xe2\xef\x75\x78\x55\x3d\xaf\x5c\xa5\xe3\x4c\x9e\x0e\x63\xa9\x47\xfc\x79\x87\x15\xd5\x18\x64\x53\xa8\x74\x95\xff\x27\x72\xf1\xf9\x7d\x9b\x75\x35\xa3\xc8\x29\x57\x14\x59\x68\x46\x51\x9e\x98\x79\xd6\x50\x60\xca\xd9\x6d\x00\xab\x65\xd4\x21\xca\x7f\x09\x7f\x19\x27\xf4\x1d\xf9\x61\x87\x8e\x8c\x5a\x04\xeb\xa3\xf3\x52\x3c\x63\x45\xde\x63\x15\xad\x37\xbc\x2f\xfe\x01\xd4\xd2\x21\x76\xf2\x23\x8c\x20\x95\x8c\xa9\x93\xd8\xf1\x77\x00\x00\x00\xff\xff\x3f\x9e\x04\x6e\xe0\x03\x00\x00"),
		},
		"/connector.go.tpl": &vfsgen۰CompressedFileInfo{
			name:             "connector.go.tpl",
			modTime:          time.Date(2020, 12, 15, 20, 4, 11, 5439500, time.UTC),
			uncompressedSize: 981,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x84\x92\x51\x6f\xda\x3e\x14\xc5\xdf\x23\xe5\x3b\xdc\xbf\x1f\xfe\x72\x10\xd8\x52\xb5\x97\xb1\xe5\x65\xe9\xda\xed\x05\xaa\x76\xef\xc8\x98\x1b\x63\x11\x7c\x23\x63\xd8\x10\xe2\xbb\x4f\x8e\x21\x4d\xb7\xb6\x7b\x33\xdc\x73\x7e\x3e\xe7\x3a\xa7\xd3\x04\xe4\xc8\x50\x38\xb6\x38\x05\x63\xc3\x7a\xbf\x14\x9a\xb6\xd2\xab\xfa\xe3\xcd\x07\xb9\xa4\x30\x59\xee\x6d\xb3\x42\x2f\xf5\x76\x35\xfc\x2d\x34\x39\x87\x3a\x90\xaf\xc8\xd5\xd6\x8c\x24\x4c\xce\xe7\x3c\x93\xd2\xd0\xd4\xa0\x43\xaf\x02\x82\x21\x30\x18\x5e\x27\x4b\x21\xc4\x1b\xfa\xd3\x09\xc4\x17\x0a\x8f\xd8\xa8\x23\xbc\x49\x8d\xaa\x2a\xa5\xb0\xe4\x9e\xc5\xad\xd2\x1b\x65\x10\xb6\xca\xba\x3c\xcb\x33\xbb\x6d\xc9\x07\xe0\x79\x06\x00\xc0\xea\x46\x19\x76\x39\x1b\x6a\x37\x46\x58\x27\x8f\x6a\xdb\x88\xc3\xcd\xf5\x7f\xda\x5d\x4e\xda\xd5\xc0\x5e\x8f\xdf\x6e\x8c\xd4\x5d\x77\xd9\xef\xa2\xe7\xbe\xe7\x78\x21\x5d\x00\xfb\xa3\xed\xcb\xc1\xdf\x05\x59\x9e\x15\xb1\x56\xbd\x77\xba\xeb\xc8\x0b\x38\xe5\x59\x8a\x72\x67\x1b\x84\x69\x09\xb1\xa4\x78\x0a\xde\x3a\xc3\x59\x1a\xb1\x31\xd0\x4e\xdc\x63\x40\x77\xe0\xec\x5b\x55\xcd\x67\xb3\xaf\xd5\x8f\xf9\xe3\xa2\x9a\xcf\xee\xbe\xdf\xb3\x62\x0c\xec\x41\x85\x35\x04\x82\xb8\x0f\x48\x3e\xa8\x6d\x83\x53\xc0\x5f\x20\xa9\x0d\x72\xad\x63\x95\x34\x12\x51\xc6\x8a\x3c\xeb\xae\x7b\x50\x7e\x87\xbc\xc8\x33\x5b\xc3\x68\x10\xa7\x2c\x81\xb1\x18\xb1\x55\xce\x6a\xce\x66\x34\x24\x47\xfb\x39\xcf\xea\x31\xa0\xf7\x31\x3a\xed\xc4\xbc\x45\xc7\x07\x88\xc4\x8c\xf3\xff\x4a\x70\xb6\x79\x86\xa1\xf7\xc9\x7f\x50\xfe\x4a\xd5\xae\x16\xe9\xa3\xec\x6d\x65\x57\x48\xcc\xf0\xe7\x2d\x6a\x5a\xa1\xe7\x75\x21\xd2\x91\xff\x9f\x6c\xc5\xa7\xf7\x2f\x58\xeb\xea\xfa\x74\x31\x65\xff\x8e\x11\xda\x4f\xf8\x85\xd5\x5d\x3c\x74\x94\x3d\xd6\x63\xd8\x7b\xd7\x21\xfb\x70\x03\xa5\x78\x0a\xca\x07\xfe\xaf\x34\x0b\x28\xe1\xf3\x64\xe8\xbb\x25\xd7\x2d\xff\xfc\x3b\x00\x00\xff\xff\xce\xbb\xce\xf8\xd5\x03\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/bot.go.tpl"].(os.FileInfo),
		fs["/connector.go.tpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}

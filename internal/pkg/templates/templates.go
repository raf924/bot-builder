// Code generated by vfsgen; DO NOT EDIT.

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Templates statically implements the virtual filesystem provided to vfsgen.
var Templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 12, 15, 14, 20, 13, 607414500, time.UTC),
		},
		"/bot.tpl": &vfsgen۰CompressedFileInfo{
			name:             "bot.tpl",
			modTime:          time.Date(2020, 12, 15, 14, 20, 13, 607414500, time.UTC),
			uncompressedSize: 839,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x84\x92\x41\x8f\xda\x30\x10\x85\xef\x96\xfc\x1f\xa6\x3e\x54\x0e\x5a\x1c\x69\xd5\x1e\xba\x2d\x17\x58\xed\xb6\x87\x02\x5a\x7a\x5f\x99\x64\x62\x2c\x1c\x4f\x64\x0c\x2d\x8a\xf2\xdf\x2b\xc7\x94\x72\xa8\xb6\x17\x8c\x3d\xef\x7d\xf3\x66\x94\xbe\x9f\x42\x39\x31\x14\xcf\x1d\x3e\x80\xb1\x71\x77\xdc\xaa\x8a\xda\x32\xe8\xe6\xd3\xfd\x87\x72\x4b\x71\xba\x3d\x5a\x57\x63\x28\xab\xb6\xbe\xbd\xab\x2d\xc5\x05\xf9\xc6\x9a\x49\x09\xd3\x61\xe0\xac\xd3\xd5\x5e\x1b\x84\x56\x5b\xcf\x19\x67\xb6\xed\x28\x44\x90\x9c\x89\xc6\x69\x23\x38\x7b\x05\xd1\xf7\xa0\xe6\x14\x5f\xd0\xe9\x33\x0c\x83\xe0\xac\xef\x21\x68\x6f\x10\xd4\xa2\xad\xbf\x53\x7d\x74\x78\x48\xb8\x51\xac\x2e\x12\xf4\x75\x7a\x13\xff\x8c\x58\x76\x7b\x93\x4e\xc1\xd9\x35\x14\xbc\x21\xad\x46\xc5\xc5\x21\x0c\x75\x7b\xa3\xac\x2f\xcf\xba\x75\xea\x74\x9f\xde\x1c\xa5\xb8\x82\x0e\xe9\x37\xda\x16\x05\x67\x45\x9a\xa9\x39\xfa\x6a\x1c\x50\x16\xd0\x73\x96\x49\x4f\xd6\x21\x3c\xcc\x20\x4d\xa9\x36\x31\x58\x6f\xa4\xc8\x25\x71\x07\x74\x50\xcf\x18\xd1\x9f\xa4\xf8\xba\x98\xaf\x7e\xbc\x2e\x56\xcb\xa7\x6f\xcf\xa2\xb8\x03\xb1\xd6\x71\x07\x91\x20\xb5\x86\xec\x80\xc6\x3a\x7c\x00\xfc\x05\x25\x75\xb1\xdc\x55\x29\x75\x2e\xa9\x24\x13\x05\x67\x63\xa3\xb5\x0e\x07\x94\x05\x67\xb6\x81\xc9\x4d\x90\xd9\x0c\x84\x48\xe1\x3a\xed\x6d\x25\xc5\x92\x6e\xc9\xc9\x3e\x70\xd6\xdc\x01\x86\x90\x42\xd3\x41\xad\x3a\xf4\xf2\x06\x91\x99\xa9\xfe\x6e\x06\xde\xba\xbf\x30\x0c\x21\xfb\x4f\x3a\xfc\xa1\x5e\x57\xae\xf2\x71\x35\xcf\xc6\xb1\xd4\x12\x7f\x3e\x62\x45\x35\x06\xd9\x14\x2a\xff\x95\xef\xb3\xb9\xf8\xfc\x76\x9b\x5d\x35\xa7\x98\x52\x6e\x29\x26\xd0\x9c\xa2\xbc\x38\x39\x6b\x28\x24\xcb\xb5\xdb\x28\x56\x9b\xa8\x43\x94\xff\x03\x7f\x99\x66\xf5\x23\xf9\x71\x87\x8e\x8c\x5a\x07\xeb\xa3\xf3\x52\xbc\x60\x45\xde\x63\x15\xad\x37\x69\x5f\xe9\x03\x50\x1b\x87\xd8\xc9\x8f\x30\x81\x7c\x4d\x9a\x3a\xc3\x86\xdf\x01\x00\x00\xff\xff\xe4\x03\xf3\x9a\x47\x03\x00\x00"),
		},
		"/connector.tpl": &vfsgen۰CompressedFileInfo{
			name:             "connector.tpl",
			modTime:          time.Date(2020, 12, 15, 14, 20, 13, 607414500, time.UTC),
			uncompressedSize: 850,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x84\x92\x41\x8f\xdb\x20\x10\x85\xef\x96\xfc\x1f\xa6\x1c\x2a\x1c\x25\x20\xad\x7a\x69\x5a\x5f\xea\xed\x6e\x7b\x49\x56\xbb\xbd\x47\x84\x00\x41\xb1\x19\x8b\x90\xb4\x91\xe5\xff\x5e\x61\x12\xd7\x2b\x55\xbb\xb7\xb1\xdf\xbc\x6f\xde\x00\x5d\xb7\x00\x3e\x33\x18\x2e\xad\x5a\x82\xb1\x61\x7f\xda\x32\x89\x0d\xf7\x42\x7f\xbe\xfb\xc4\xb7\x18\x16\xdb\x93\xad\x77\xca\x73\xd9\xec\xa6\xdf\x4c\xa2\x73\x4a\x06\xf4\x15\x3a\x6d\xcd\x8c\xc3\xa2\xef\xf3\xac\x15\xf2\x20\x8c\x82\x46\x58\x97\x67\x79\x66\x9b\x16\x7d\x00\x9a\x67\x00\x00\x44\xd7\xc2\x90\x6b\x6d\xb0\x3d\x18\x66\x1d\xbf\x88\xa6\x66\xe7\xbb\xdb\x7f\x3c\x5e\x2b\xe9\x34\x90\xff\xa6\xe2\xed\xc1\x70\x39\x0c\xe6\x63\x90\x91\xfb\x96\xe3\x55\xeb\x06\x48\xd7\x01\xfb\x86\xe1\x59\xd5\xe2\x02\x7d\xff\x5a\xa8\x52\xbf\x45\x37\xd1\x8b\xb8\x96\x3e\x39\x39\xec\x48\x0b\xe8\xf2\x2c\x45\x79\xb0\xb5\x82\x65\x09\x71\x49\xf6\x12\xbc\x75\x86\x92\x24\x91\x39\xe0\x91\x3d\xaa\xa0\xdc\x99\x92\x1f\x55\xb5\x5e\xad\xbe\x57\xbf\xd6\xcf\x9b\x6a\xbd\x7a\xf8\xf9\x48\x8a\x39\x90\x27\x11\xf6\x10\x10\xe2\x79\x40\xf2\x81\xb6\xb5\x5a\x82\xfa\x03\x1c\xdb\xc0\xf7\x32\xae\x92\x24\x16\xdb\x48\x91\x67\xc3\xb8\x27\xe1\x8f\x8a\x16\x79\x66\x35\xcc\x26\x71\xca\x12\x08\x89\x11\x5b\xe1\xac\xa4\x64\x85\x53\x72\xb4\xf7\x79\xa6\xe7\xa0\xbc\x8f\xd1\xf1\xc8\xd6\xad\x72\x74\x82\x48\xcc\xa8\x7f\x28\xc1\xd9\xfa\x1f\x4c\x79\x9f\xfc\x67\xe1\x6f\x54\xe9\x34\x4b\x2f\x62\xb4\x95\xc3\x42\x6c\xa5\x7e\xdf\x2b\x89\x3b\xe5\xa9\x2e\x58\x2a\xe9\xc7\x64\x2b\xbe\xbc\x3d\x60\x2f\xab\xdb\xd5\xc5\x94\xe3\x3d\x46\xe8\xa8\xd0\x2b\x6b\x18\x3c\x75\x94\x23\xd6\xab\x70\xf2\x6e\x40\x8e\xe1\x26\x9d\xec\x25\x08\x1f\xe8\x7b\x69\x36\x50\xc2\xd7\xc5\xd4\x77\x8f\x6e\x38\xfc\xfe\x6f\x00\x00\x00\xff\xff\xee\x62\xc5\xa7\x52\x03\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/bot.tpl"].(os.FileInfo),
		fs["/connector.tpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
